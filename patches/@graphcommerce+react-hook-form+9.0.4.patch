diff --git a/node_modules/@graphcommerce/react-hook-form/src/useFormAutoSubmit.tsx b/node_modules/@graphcommerce/react-hook-form/src/useFormAutoSubmit.tsx
index c172d75..08157d0 100644
--- a/node_modules/@graphcommerce/react-hook-form/src/useFormAutoSubmit.tsx
+++ b/node_modules/@graphcommerce/react-hook-form/src/useFormAutoSubmit.tsx
@@ -4,11 +4,12 @@ import { useMemoObject } from '@graphcommerce/next-ui/hooks/useMemoObject'
 import { cloneDeep } from '@apollo/client/utilities'
 // eslint-disable-next-line import/no-extraneous-dependencies
 import { debounce } from '@mui/material'
-import React, { startTransition, useCallback, useEffect, useRef, useState } from 'react'
+import React, { useCallback, useEffect, useRef, useState } from 'react'
 import type {
   DeepPartialSkipArrayKey,
   FieldPath,
   FieldValues,
+  UseFormHandleSubmit,
   UseFormReturn,
   UseWatchProps,
 } from 'react-hook-form'
@@ -94,7 +95,7 @@ export function useFormAutoSubmit<
       submitDebounced()
       return () => submitDebounced.clear()
     }
-    return () => {}
+    return () => { }
   }, [canSubmit, force, shouldSubmit, submitDebounced, disabled])
 
   return submitting
@@ -105,7 +106,7 @@ export type FormAutoSubmitProps<TFieldValues extends FieldValues = FieldValues>
 
   /** SubmitHandler */
   // eslint-disable-next-line react/no-unused-prop-types
-  submit: ReturnType<UseFormReturn<TFieldValues>['handleSubmit']>
+  submit: ReturnType<UseFormHandleSubmit<TFieldValues>>
 
   /**
    * When a current submission is already in flight, should we wait for it to finish before
@@ -144,15 +145,15 @@ function useAutoSubmitBase<TFieldValues extends FieldValues = FieldValues>(
   } = props
 
   // We create a stable object from the values, so that we can compare them later
-  const values = useMemoObject(cloneDeep(useWatch(watchOptions)))
-  const oldValues = useRef<DeepPartialSkipArrayKey<TFieldValues>>(values)
+  const values = useMemoObject(cloneDeep(useWatch(watchOptions as any)))
+  const oldValues = useRef<DeepPartialSkipArrayKey<TFieldValues>>(values as any)
   const { isValidating, isSubmitting, isValid } = useFormState(watchOptions)
 
   const submitDebounced = useDebounce(
     async () => {
       try {
         await new Promise((resolve) => {
-          oldValues.current = values
+          oldValues.current = values as any
           resolve(null)
         }).then(() => submit())
       } catch (e) {
diff --git a/node_modules/@graphcommerce/react-hook-form/src/validationPatterns.tsx b/node_modules/@graphcommerce/react-hook-form/src/validationPatterns.tsx
index 9ed3afb..33ba0d8 100644
--- a/node_modules/@graphcommerce/react-hook-form/src/validationPatterns.tsx
+++ b/node_modules/@graphcommerce/react-hook-form/src/validationPatterns.tsx
@@ -1,6 +1,7 @@
 export const emailPattern =
   /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
-export const phonePattern =
-  /^\s*(?:\+?(\d{1,3}))?([-. (]*(\d{3})[-. )]*)?((\d{3})[-. ]*(\d{2,4})(?:[-.x ]*(\d+))?)\s*$/
+export const phonePattern = /^[0-9]+$/
+
+// /^\s*(?:\+?(\d{1,3}))?([-. (]*(\d{3})[-. )]*)?((\d{3})[-. ]*(\d{2,4})(?:[-.x ]*(\d+))?)\s*$/
 
 export const houseNumberPattern = /^\d+([-\\/]\d+)*$/
